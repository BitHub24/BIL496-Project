"""
Django settings for map_project project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv
from .db_config import DATABASE_CONFIG  # İmport'u tekrar aktif hale getiriyoruz

# .env dosyasını yükle
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-x&1m(=t26tb0m=e#8t!o_%fp*ve0tg6ni23$@^%x)eq4@3^^7g')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = ["bil496-project.onrender.com","backend-496-1094631205138.us-central1.run.app","127.0.0.1", "localhost"]
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',  # Token tabanlı kimlik doğrulama için
    'corsheaders',
    'directions',
    'pharmacy',
    'users',  # Yeni eklenen kullanıcı yönetimi uygulaması
    'geocoding',  # HERE API için geocoding uygulaması
    'django_crontab',  # Cronjob yönetimi için
    'traffic_data',  # Trafik verilerini toplama modülü
    'wifi_points',  # WiFi noktaları uygulaması
    'bicycle_points',  # Bisiklet istasyonları uygulaması
    'social_django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware en üstte olmalı
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Statik dosyalar için
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'map_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'map_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# db_config.py'den veritabanı yapılandırmasını al
DATABASES = DATABASE_CONFIG

# Render.com PostgreSQL veritabanı bağlantısı
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://frontend-app-1094631205138.us-central1.run.app",
]

# Add your OSRM server URL here (we'll use a public instance)
OSRM_SERVER_URL = "http://router.project-osrm.org"

# HERE API ayarları
HERE_API_KEY = os.environ.get('HERE_API_KEY', '')
HERE_API_BASE_URL = "https://geocode.search.hereapi.com/v1/geocode"
#Google Maps API
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# REST Framework ayarları
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Crontab ayarları
CRONJOBS = [
    # Nöbetçi eczane verileri için günlük görev
    ('0 6 * * *', 'django.core.management.call_command', ['fetch_duty_pharmacies']),
    # Trafik verilerini toplama görevi (15 dakikada bir)
    ('*/15 * * * *', 'traffic_data.cron.collect_traffic_data_cron'),
]

# Crontab komut öneki (virtual environment'ı aktifleştirmek için)
CRONTAB_COMMAND_PREFIX = 'source ' + os.path.join(BASE_DIR, 'venv/bin/activate') + ' && '

# E-posta ayarları
# Geliştirme ortamında konsola yazdırma, üretim ortamında gerçek SMTP
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
    
# SMTP e-posta ayarları (sadece DEBUG=False iken kullanılır)
EMAIL_HOST = os.environ.get('EMAIL_HOST', '')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@bithubmaps.com')

# Session ayarları
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_SECURE = False  # Geliştirme ortamında False, production'da True olmalı
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = None  # OAuth yönlendirmeleri için None kullan
SESSION_COOKIE_AGE = 86400  # 1 gün (saniye cinsinden)
SESSION_SAVE_EVERY_REQUEST = True  # Her istekte session verilerini kaydet

# CSRF ayarları
CSRF_COOKIE_SECURE = False  # Geliştirme ortamında False, production'da True olmalı
CSRF_COOKIE_HTTPONLY = False
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000', 
    'http://127.0.0.1:3000',
    'https://frontend-app-1094631205138.us-central1.run.app'
]
CSRF_COOKIE_SAMESITE = None  # OAuth yönlendirmeleri için None kullan

# Authentication backends
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

# Social Auth ayarları - sıfırdan yapılandırma
SOCIAL_AUTH_URL_NAMESPACE = 'social'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/api/users/social-auth/complete/'
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/api/users/social-auth/complete/'
SOCIAL_AUTH_LOGIN_ERROR_URL = 'http://localhost:3000/login'
SOCIAL_AUTH_REDIRECT_IS_HTTPS = False  # Development için False, production için True

# Google OAuth2 için state timeout ayarı
SOCIAL_AUTH_STATE_TIMEOUT = 10000  # 10000 saniye (~ 2.8 saat)

# Production ortamında farklı URL kullanmak için
if not DEBUG:
    SOCIAL_AUTH_LOGIN_ERROR_URL = 'https://frontend-app-1094631205138.us-central1.run.app/login'
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = True
    CSRF_TRUSTED_ORIGINS = ['https://frontend-app-1094631205138.us-central1.run.app']

# Google OAuth2 settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('GOOGLE_OAUTH2_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'openid',
]

# Google OAuth2 ek ayarları
SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {
    'prompt': 'select_account',
    'access_type': 'offline',
}

# Google OAuth token handling
SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_PARAMS = {
    'access_type': 'offline',
}

# Social Auth davranış ayarları
SOCIAL_AUTH_RAISE_EXCEPTIONS = True
SOCIAL_AUTH_SANITIZE_REDIRECTS = False

# CSRF豁免列表 - Bu URLler için CSRF koruması kullanılmaz
CSRF_EXEMPT_URLS = [
    r'^/api/users/social-auth/.*$',  # OAuth ile ilgili tüm URLler
]

# Social Auth kullanıcı alanları
SOCIAL_AUTH_USER_FIELDS = ['username', 'email', 'first_name', 'last_name']

# Frontend URL tanımı (hem development hem production için)
FRONTEND_URL = 'http://localhost:3000'
if not DEBUG:
    FRONTEND_URL = 'https://frontend-app-1094631205138.us-central1.run.app'

# Social Auth pipelines - SADE VE GÜVENLİ ÇÖZÜM
SOCIAL_AUTH_PIPELINE = (
    # Temel kimlik doğrulama adımları
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    
    # ÖNEMLİ: social_user adımı yerine kullandığımız adım - her seferinde yeni kullanıcı oluşturur
    'users.pipeline.force_new_user',  # Kritik değişiklik burada
    
    # Özel kullanıcı oluşturma (kullanıcı profili de burada oluşturuluyor)
    'users.pipeline.generate_username',
    'users.pipeline.create_new_user',
    
    # İlişkilendirme - Sadece bağlantı oluştur, tekrar profil oluşturmadan
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    
    # Token oluştur ve yönlendir
    'users.pipeline.create_token',
    'users.pipeline.redirect_to_frontend',
)
